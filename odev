1.Algoritmayı neden analiz ederiz? Algoritmaanalizini nasılyaparız? Açıklayınız.


Neden Analiz Ederiz?
Yazdığımız algoritmanın performansını bilmek isteriz farklı algoritmalarla karşılaştırmak isteriz ve daha iyisi mümkün mü sorusuna ancak analiz yaparak cevap verebiliriz.


Nasıl Yaparız?
Matematiksel olarak ifade edebileceğimiz donanımsal ve sistemsel bağımlılığı olmayan Büyük O Notasyonunu kullanabiliriz.
 

2.Bir dizi içerisindeki en küçük elemanı bulan bir fonksiyon kodu yazınız. Yazdığınız fonksiyonun yürütme zamanını gösteren T(n) bağıntısını belirleyiniz.


a) En İyi:
En iyi durumda hedef değer dizinin ilk elemanında bulunur bu nedenle algoritmanın hedef değerin indexini döndürmeden önce yalnızca bir karşılaştırma yapmamız gerekir en iyi durum da O(1) olur.

b) Ortalama:
Ortalama durumda hedef değerin giriş dizisinde rastgele yerleştirildiğini düşünürsek ortalama olarak hedef değeri bulmadan önce giriş dizisindeki öğelerin yarısını incelemeliyiz bu yüzden ortalama O(N/2)'dir, bu da O(N) ye eşit olur.

c) En Kötü:
En kötü durumda hedef değer giriş dizisinde yoktur veya giriş dizisinin sonunda yer alır by durumda hedef değerin olmadığını belirlemeden veya dizinin sonunda bulmadan önce giriş dizisindeki her öğeyi incelememiz gerekiyor inceliyince de en kötü durum u O(N).

Ω: O(1)
Θ: O(N)
O: O(N)

    
3.Aşağıda bir dizi içerisinde arama yapan kod parçası verilmiştir. Buna göre aşağıda belirtilençalışma zamanlarını hesaplayınız.Hesaplama adımlarınızı açıklayınız.a)En iyib)Ortalama c)En kötü


	int Search(int D[], int N, int sayi)
			{
			int i = 0;
			while (i < N) {
			if (D[i] == sayi) break;
			i++;
			}
			
			if (i < N) return i;
			else return -1;
		}
    
    4.5  adet  öğrencinin kişisel bilgilerini(ad,  soyad,  no,  ...)ve  adresbilgilerini  depolayanstruct tanımlayınız ve bu yapıyı kullanarak ekranda gösterenkodu yazınız.
    
    
    #include <iostream>
#include <string>
using namespace std;

struct ogrenci {
    string isim;
    string soyisim;
    int no;
    string adres;
};

int main() {
    ogrenci ogrenciler[5];
    
    ogrenciler[0] = {"Ediz", "Senturk", 123, "Istanbul Beylikduzu"};
    ogrenciler[1] = {"Ezgi", "Senturk", 321, "Istanbul Beylikduzu"};
    ogrenciler[2] = {"Selcuk", "Yazar", 789, "Kirklareli Merkez"};
    ogrenciler[3] = {"Gokce", "Erenler", 246, "Kirklareli Merkez"};
    ogrenciler[4] = {"Dilan", "Alakus", 135, "Kirklareli Merkez"};
    
    for (int i = 0; i < 5; i++) {
        cout << "ogrenci " << i+1 << ":" << endl;
        cout << "isim: " << ogrenciler[i].isim << endl;
        cout << "soyisim: " << ogrenciler[i].soyisim << endl;
        cout << "no: " << ogrenciler[i].no << endl;
        cout << "adres: " << ogrenciler[i].adres << endl << endl;
    }
    
    return 0;
}
